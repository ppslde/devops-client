@page "/authenticate"

@using System.Security.Claims;
@using DevOps.Client.Authentication;
@using DevOps.Core.Interfaces;
@using DevOps.Core.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager NavManager

@inject IUserService _userService
@inject ISessionData _sessionData
@inject AuthenticationStateProvider _authState

<RadzenCard>
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password with placeholder</RadzenText>
    <RadzenPassword Placeholder="Enter password..." @bind-Value="@Token" />
    <RadzenButton Variant="Variant.Flat" Click=@(args => Login()) Text="Login" />
</RadzenCard>

@code {

    public string? Token { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthTask { get; set; }

    private ClaimsPrincipal? claimUser;

    protected async override Task OnInitializedAsync()
    {
        if (AuthTask == null)
            return;

        var authState = await AuthTask;
        claimUser = authState.User;
    }

    public async Task Login()
    {
        await _sessionData.SetToken(Token);
        AppUser? user = await _userService.GetCurrentUser();

        if (user == null)
            return;

        var authState = await ((CustomAuthenticationStateProvider)_authState).ChangeUser(user, "Associate");
        claimUser = authState.User;

        NavManager.NavigateTo("/");
    }
}